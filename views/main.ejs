<!DOCTYPE html>
<html>
<head>
    <title>Main</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="/javascript/GoogleMap.js"></script>
    <script src="/import/jquery-3.7.1.min.js"></script>
    <link href="/import/bootstrap.min.css" rel="stylesheet">
    <script src="/import/bootstrap.min.js"></script>
    <script src="/javascript/idb-utility.js"></script>
    <script src="/javascript/main.js"></script>
    <script src="/javascript/commonTool.js"></script>
    <link rel="preload" href="/fonts/poetsenone-regular-sub.ttf" as="font" type="font/ttf" crossorigin="anonymous">
    <script src="/javascript/sort.js"></script>
    <style>
        @font-face {
            font-family: 'PoetsenOne';
            src: url('/fonts/poetsenone-regular-sub.ttf') format('truetype');
            font-weight: 500;
            font-style: normal;
        }

        html,
        body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        /* 自定义样式 */
        .plant-card {
            border: 1px solid #ccc;
            /*border-radius: 5px;*/
            /*margin-bottom: 20px;*/
            padding: 10px;
        }

        .plant-card img {
            max-width: 100%;
            height: 250px;
            width: 250px;
        }

        .footer {
            height: 60px; /* consistent footer height */
            background-color: #343a40;
            color: white;
            text-align: center;
            padding: 20px 0;
            width: 100%;
            position: absolute;
            bottom: 0;
        }

        .custom-heading {
            font-family: 'PoetsenOne';
            font-size: 40px; /* 设置字体大小 */
            font-weight: 500; /* 设置字体粗细 */
            color: black; /* 设置字体颜色 */
            padding-left: 10px;
            margin: 0;
        }
    </style>
</head>
<body>
<div class="row align-items-center" style="height: 70px;padding: 0 20px">
    <div class="col">
        <h3 class="custom-heading">All Plants</h3>
    </div>

    <div class="col">
        <div class="row justify-content-end">
            <div class="col-md-2 d-flex justify-content-end align-items-center">
                Sort by:
            </div>
            <div class="col-md-4">
                <select id="dropdown" class="form-select">
                    <option value="option1">None</option>
                    <option value="option2">Time Up</option>
                    <option value="option3">Time Down</option>
                    <option value="option4">Completed</option>
                    <option value="option5">In Progress</option>
                    <option value="option6">Nearest Plant</option>
                    <option value="option6">Furthest Plant</option>
                    <option value="option6">With Flowers</option>
                    <option value="option6">Without Flowers</option>
                </select>
            </div>
        </div>

    </div>
</div>

<div>
    <div id="container" class="container" style="min-height: 600px"></div>
</div>
<footer class="footer">
    <p>&copy; 2024 Intelligent Web Team04. All Rights Reserved.</p>
</footer>


</body>
<script>
    // 获取下拉列表和显示选项的容器
    const dropdown = document.getElementById('dropdown');
    const selectedOption = document.getElementById('selectedOption');

    // 监听下拉列表的 change 事件
    dropdown.addEventListener('change', function () {
        // 获取用户选择的选项
        const selectedValue = dropdown.value;
        const selectedText = dropdown.options[dropdown.selectedIndex].text;
        switch (selectedText) {
            case 'None':
                openPlantIDB().then(IDB => {
                    getAllPlants(IDB, "plants").then(plantList => {
                        deleteAllPlantsDOM();
                        renderPlantList(plantList);
                    });
                });
                break;
            case 'Time Up':
                sortByDate('asc').then(plantList => {
                    deleteAllPlantsDOM();
                    renderPlantList(plantList);
                });
                break;
            case 'Time Down':
                sortByDate('desc').then(plantList => {
                    deleteAllPlantsDOM();
                    renderPlantList(plantList);
                });
                break;
            case 'Completed':
                filterPlants('status', 'Completed').then(plants => {
                    deleteAllPlantsDOM();
                    renderPlantList(plants);
                });
                break;
            case 'In Progress':
                filterPlants('status', 'In Progress').then(plants => {
                    deleteAllPlantsDOM();
                    renderPlantList(plants);
                });
                break;
            case 'Nearest Plant':
                console.log('sort by near-----------------')
                getCurrentLocation(loc => {
                    if (loc != null) {
                        sortByDistance(loc, 'asc').then(async plantList => {
                            await deleteAllPlantsDOM()
                            renderPlantList(plantList);
                        })
                    }
                })
                break;
            case 'Furthest Plant':
                console.log('sort by far---------------')
                getCurrentLocation(loc => {
                    if (loc != null) {
                        sortByDistance(loc, 'desc').then(async plantList => {
                            await deleteAllPlantsDOM();
                            renderPlantList(plantList);
                        })
                    }
                })
                break;
            case 'With Flowers':
                console.log('sort by with flowers---------------')
                filterPlants("flowers", "yes").then(async plantList => {
                    await deleteAllPlantsDOM();
                    renderPlantList(plantList);
                })
                break;
            case 'Without Flowers':
                console.log('sort by without flowers---------------')
                filterPlants("flowers", "no").then(async plantList => {
                    await deleteAllPlantsDOM();
                    renderPlantList(plantList);
                })
                break;
            default:
                // 处理其他未知情况的逻辑
                break;
        }

    });

    function getCurrentLocation(callback) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(position => {
                const latLng = {lat: position.coords.latitude, lng: position.coords.longitude};
                console.log('当前位置：' + latLng.lat + ', ' + latLng.lng);
                callback(latLng); // 调用回调函数，并将位置信息作为参数传递给它
            })
        } else {
            alert("Geolocation is not supported")
            location.reload()
        }
    }
</script>
</html>