<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Plant Details</title>
  <script src="/import/jquery-3.7.1.min.js"></script>
  <link href="/import/bootstrap.min.css" rel="stylesheet">
  <script src="/import/bootstrap.min.js"></script>
  <script src="/javascript/idb-utility.js"></script>
  <script src="/javascript/detail.js"></script>
  <script src="/javascript/commonTool.js"></script>
  <style>
    body {
      display: flex;
      flex-direction: column;
      margin: 0 auto;
      padding: 0;
      height: 90vh;
    }

    .container {
      flex: 1 1 auto;
      display: flex;
      width: 100%;
      overflow: hidden;
    }

    .resizable {
      display: flex;
      height: 100%;
      width: 100%;
    }

    .panel {
      overflow-y: auto;
      padding: 10px;
    }

    #plant-details {
      width: calc(100% - 200px);
      background-color: #f9f9f9;
    }

    #chat {
      width: 300px;
      display: flex;
      flex-direction: column;
      background-color: #e9e9e9;
    }

    .resizer {
      width: 5px;
      background-color: #cccccc;
      cursor: col-resize;
      flex-shrink: 0;
    }

    #chat_history {
      flex: 1;
      overflow-y: auto;
      margin: 10px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      background-color: white;
    }

    #chat_input_box {
      padding: 10px;
      background-color: white;
      border: 1px solid #ccc;
      margin: 10px;
      border-radius: 8px;
    }

    .input-group {
      display: flex;
      width: 100%;
    }

    .form-control {
      flex-grow: 1;
      border-radius: 20px; /* Rounded corners */
      padding: 10px;
      border: 1px solid #ddd;
      margin-right: 10px;
    }

    .send-button {
      border-radius: 20px; /* Rounded corners */
      border: 2px solid purple;
      background-color: transparent;
      color: purple;
      padding: 10px 20px;
      cursor: pointer;
      white-space: nowrap;
      transition: all 0.2s;
    }

    .send-button:hover {
      background-color: purple;
      color: white;
    }
  </style>
</head>
<body onload="init()">
<div class="container">
  <div class="resizable">
    <!-- Plant Details Panel -->
    <div id="plant-details" class="panel">
      <h1>Plant Details</h1>
      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Plant Name: <%= plant.plantName %></h5>
          <p class="card-text">Description: <%= plant.description %></p>
          <p class="card-text">Details: <%= plant.details %></p>
          <p class="card-text">Date/Time: <%= new Date(plant.datetime).toLocaleString() %></p>
          <p class="card-text">User Nickname: <%= plant.nickName %></p>
          <p class="card-text">Location: <%= plant.location %></p>
          <p class="card-text">Plant Characteristics:</p>
          <p class="card-text">Flowers: <%= plant.flowers %></p>
          <p class="card-text">Sun Exposure: <%= plant.sunExposure %></p>
          <p class="card-text">Flower Color: <%= plant.flowerColor %></p>
          <p class="card-text">Status: <%= plant.status %></p>

          <!-- Optional DBpedia Information -->
          <% if (plant.DBpediaLink) { %>
            <p class="card-text">
              DBpedia Link: <a href="<%= plant.DBpediaLink %>" target="_blank">More Info</a>
            </p>
          <% } %>
          <% if (plant.DBpediaName) { %>
            <p class="card-text">DBpedia Name: <%= plant.DBpediaName %></p>
          <% } %>
          <% if (plant.DBpediaDescription) { %>
            <p class="card-text">DBpedia Description: <%= plant.DBpediaDescription %></p>
          <% } %>
          <% if (plant.DBpediaGunes) { %>
            <p class="card-text">DBpedia Gunes: <%= plant.DBpediaGunes %></p>
          <% } %>

          <!-- Optional Photo -->
          <% if (plant.photo) { %>
            <div class="plant-photo">
              <img src="<%= plant.photo %>" alt="Plant Photo" style="max-width: 100%; border-radius: 8px;">
            </div>
          <% } %>

        </div>
      </div>
    </div>
    <!-- Resizer Separator -->
    <div class="resizer"></div>

    <!-- Chat Panel -->
    <div id="chat">
      <!-- Chat History -->
      <div id="chat_history">
        <p id="who_you_are">You are in room: <%= plant.plantId %></p>
      </div>

      <!-- Chat Input Box -->
      <div id="chat_input_box">
        <div class="input-group">
          <input type="text" class="form-control" id="chat_input" placeholder="Type your message..."
                 onkeydown="handleKeyDown(event)">
          <button class="send-button" onclick="sendChatText()">Send</button>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="btn-container mt-4">
  <!--  <a href="/" class="btn btn-primary mr-2">Back to Home</a>-->
  <button type="button" class="btn btn-danger ml-2">Edit</button>
</div>

<script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
<script>
  // Initialize socket.io connection and setup chat room
  let name = getNickName();
  let roomNo = getpPlantId();
  let socket = io();

  function init() {
    // Event listener for joining a room
    socket.on('joined', function (room, userId) {
      if (userId === name) {
        document.getElementById('who_you_are').innerHTML = `${userId}, you are in room: ${room}`;
      } else {
        writeOnHistory(`<b>${userId}</b> joined room ${room}`);
      }
      getChatRecord(room);
    });

    // Event listener for receiving chat messages
    socket.on('chat', function (room, userId, chatText) {
      let who = userId === name ? 'Me' : userId;
      writeOnHistory(`<b>${who}:</b> ${chatText}`);
    });

    connectToRoom();
    enableResizer(); // Enable resizable panel feature
  }

  // Send the chat message to the server
  function sendChatText() {
    let chatText = document.getElementById('chat_input').value;
    if (!chatText.trim()) return;
    socket.emit('chat', roomNo, name, chatText);
    document.getElementById('chat_input').value = ''; // Clear input
  }

  // Append new chat history entries to the container
  function writeOnHistory(text) {
    let history = document.getElementById('chat_history');
    let paragraph = document.createElement('p');
    paragraph.innerHTML = text;
    history.appendChild(paragraph);
    // Scroll down to show the latest message
    history.scrollTop = history.scrollHeight;
  }

  // Fetch the entire chat history for a particular room
  function getChatRecord(roomNo) {
    fetch(`/requestHandler/getChatRecordById/${roomNo}`)
            .then(response => response.json())
            .then(data => {
              for (let eachRecord of data) {
                writeOnHistory(`<b>${eachRecord.nickName}:</b> ${eachRecord.content}`);
              }
            })
            .catch(error => {
              console.error('Error occurred:', error);
            });
  }

  // Request to join or create a new chat room
  function connectToRoom() {
    socket.emit('create or join', roomNo, name);
  }

  // Enable resizing of plant and chat panels
  function enableResizer() {
    const resizer = document.querySelector('.resizer');
    const plantDetails = document.getElementById('plant-details');
    const chat = document.getElementById('chat');

    let startX = 0;
    let startWidth = 0;

    resizer.addEventListener('mousedown', function (event) {
      startX = event.clientX;
      startWidth = plantDetails.offsetWidth;
      document.addEventListener('mousemove', resize);
      document.addEventListener('mouseup', stopResize);
    });

    function resize(event) {
      const newWidth = startWidth + (event.clientX - startX);
      const totalWidth = plantDetails.parentNode.offsetWidth;
      plantDetails.style.width = `${(newWidth / totalWidth) * 100}%`;
      chat.style.width = `${((totalWidth - newWidth) / totalWidth) * 100}%`;
    }

    function stopResize() {
      document.removeEventListener('mousemove', resize);
      document.removeEventListener('mouseup', stopResize);
    }
  }

  // Handle key down event for chat input
  function handleKeyDown(event) {
    if (event.key === "Enter") {
      event.preventDefault();
      sendChatText();
    }
  }

</script>
</body>
</html>