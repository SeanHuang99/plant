<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
<!--    todo:改为本地文件-->
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <link rel='stylesheet' href='/public/stylesheets/style.css'/>
<!--    <script src="/public/javascript/test.js"></script>-->
</head>
<body onload="init()">
<h1><%= title %></h1>
<div id="initial_form" style="display: block">
    <p>Please insert the id of the Room you want to Join, if you do not have a room id, click Generate Room</p>
    <form onsubmit="return false;">
        <p><label for="name"> Your name </label>
            <input type="text" id="name" name="name">
        </p>
<!--        <p>-->
<!--            <label for="roomNo"> Your room </label>-->
<!--            <input type="text" id="roomNo" name="roomNo">-->
<!--            <button id="roomNoGenerator" onclick="generateRoom()">Generate Room</button>-->
<!--        </p>-->
        <button id="connect" onclick="connectToRoom()">Connect</button>
    </form>
</div>
<div id="chat_interface" style="display: none">
    <div>
        <div id="who_you_are" style="display: inline"></div>, you are in room: <div id="in_room" style="display: inline"></div>
    </div>
    <div id="history" class="boxed"></div>
    <div id="input" class="bottom boxed">
        <form onsubmit="return false;" style="width: 100%">
            <p>
                <label for="name"> chat: </label>
                <input type="text" id="chat_input" name="chat_input" style="width: 80%">
                <button id="chat_send" onclick="sendChatText()">Send</button>
            </p>
        </form>
    </div>
</div>

<script>
    let name = null;
    let roomNo = "<%= roomNo %>";
    let socket = io();


    /**
     * called by <body onload>
     * it initialises the interface and the expected socket messages
     * plus the associated actions
     */
    function init() {
        // it sets up the interface so that userId and room are selected
        document.getElementById('initial_form').style.display = 'block';
        document.getElementById('chat_interface').style.display = 'none';

        // called when someone joins the room. If it is someone else it notifies the joining of the room
        socket.on('joined', function (room, userId) {
            if (userId === name) {
                // it enters the chat
                hideLoginInterface(room, userId);
            } else {
                // notifies that someone has joined the room
                writeOnHistory('<b>'+userId+'</b>' + ' joined room ' + room);
            }
            getChatRecord(roomNo);
        });
        // called when a message is received
        socket.on('chat', function (room, userId, chatText) {
            let who = userId
            if (userId === name) who = 'Me';
            writeOnHistory('<b>' + who + ':</b> ' + chatText);
        });

    }

    /**
     * called to generate a random room number
     * This is a simplification. A real world implementation would ask the server to generate a unique room number
     * so to make sure that the room number is not accidentally repeated across uses
     */
    function generateRoom() {
        roomNo = Math.round(Math.random() * 10000);
        document.getElementById('roomNo').value = 'R' + roomNo;
    }

    /**
     * called when the Send button is pressed. It gets the text to send from the interface
     * and sends the message via  socket
     */
    function sendChatText() {
        let chatText = document.getElementById('chat_input').value;
        socket.emit('chat', roomNo, name, chatText);
    }

    /**
     * used to connect to a room. It gets the user name and room number from the
     * interface
     */
    function connectToRoom() {
        // roomNo = document.getElementById('roomNo').value;
        name = document.getElementById('name').value;
        if (!name) name = 'Unknown-' + Math.random();
        socket.emit('create or join', roomNo, name);
    }

    /**
     * it appends the given html text to the history div
     * @param text: teh text to append
     */
    function writeOnHistory(text) {
        let history = document.getElementById('history');
        let paragraph = document.createElement('p');
        paragraph.innerHTML = text;
        history.appendChild(paragraph);
        document.getElementById('chat_input').value = '';
    }

    /**
     * it hides the initial form and shows the chat
     * @param room the selected room
     * @param userId the user name
     */
    function hideLoginInterface(room, userId) {
        document.getElementById('initial_form').style.display = 'none';
        document.getElementById('chat_interface').style.display = 'block';
        document.getElementById('who_you_are').innerHTML= userId;
        document.getElementById('in_room').innerHTML= ' '+room;
    }

    function getChatRecord(roomNo){
        fetch('/requestHandler/getChatRecordById/'+roomNo)
            .then(response => response.json())
            .then(data => {
                for(eachRecord in data){
                    console.log(data[eachRecord]);
                    writeOnHistory('<b>' + data[eachRecord].nickName + ':</b> ' + data[eachRecord].content);
                }
            })
            .catch(error => {
                console.error('发生错误：', error);
            });
    }

    function compareTime(arr){
        arr.sort((a, b) => b.date.localeCompare(a.date) || b.time.localeCompare(a.time));
    }
</script>
</body>
</html>
